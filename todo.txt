- test using Ivy

- implement password resets (for users & admin)
- service/page for users to see their ratings and change them
- non-authenticated gallery page
- a 'learn more' page
- make account related services into separate dropdown on the right
- implement backgrounds on pages (at least outside of containers)
- implement pagination for recipe search page and possibly recipe list page
- implement route animations
- make it so when you navigate to recipe detail page you're at the top of the page (all the way scrolled up)
- consider implementing sort & filter functionality to search page and make a pipe for filter and sorting for both recipe list + search page
^ -> (possibly move filtering + sorting to external pipe)
- removing routing to error component once I'm confident that most errors have been handled and routed to in code sufficiently
- make sure all components grabbing data from resolvers route to error page on error existence
^ -> possibly handle rerouting to error page in interceptor or resolvers
- implement route guard when leaving edit users page if changes have been made and not saved
- implement logic so that the application asks the user to log back in if tokens are missing
- add more validation for user submitted info, especially in front end (min + max lengths, disallowed characters for injection attacks)
- simplify/break-up route-guard logic

              - Security-Related -
- figure out how to get angular to obey node content security policy headers (works when serving up angular files from node so that it's all the same domain)
^^^>>> eventually update connect-src in headerSecurity.js
- create validation schemas for users for logins and sign ups
- possibly use built-in escape function for passwords as well
- eventually move away from storing token into local storage
- add a re-authentication process on edit users confirmation for admin request
- add a match-to regex in model level authentication for mongoose for passwords (just doing it for the experience, unneeded in application)

- front-end error handling eventually for unauthorized/expired sessions
- implement seeds from hard coded data instead of having api calls to trigger manually
- modularize some of the logic in edit/approve recipe components to external service
- implement validation to make sure recipe titles are unique
- implement validation in reactive angular forms for mongoDB inj characters:   $, }, {

**                                                           **
- add reject button/functionality to approve recipe detail page
**                                                           **
^^^^>>>>> this can lead to a notifications page where an admin can give a user a reason why they rejected or a notification that their recipe was approved

- commenting functionality on recipes?
- possibly split route-guard into two guards to simplify logic (maybe)

- look for angular equivalent to express-validator (aside from reactive forms validation)

- implement unit (& eventually integration) tests for node & angular

- implement a graphQL server for certain requests where it makes sense to have
- implement redis for certain functionality such as load more recipe on scroll (also implement pagination in form of infinite scrolling for recipe list page)
