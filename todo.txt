** Separate to-dos into API & Ng related files in respective project directories **


- create docker files for dev + prod
- serve angular files to dist folder (create volume in node container, just copy in for prod) to only have 2 containers (node + mongo)
^^^>>> once angular app is eventually deployed at a different location than node app, create 3rd container for nginx server possibly for separate domain testing

- test using Ivy

- implement password resets (for users & admin)
- service/page for users to see their ratings and change them
- non-authenticated gallery page
- a 'learn more' page
- make account related services into separate dropdown on the right
- implement backgrounds on pages (at least outside of containers)
- implement pagination for recipe search page and possibly recipe list page
- implement route animations
- consider implementing sort & filter functionality to search page
- removing routing to error component once I'm confident that most errors have been handled and routed to in code sufficiently
- make sure all components that are grabbing data from resolvers route to error page on error existence
^ -> possibly handle rerouting to error page in interceptor or resolvers
- implement route guard when leaving edit users page if changes have been made and not saved
- implement logic so that the application asks the user to log back in if tokens are missing
- add more validation for user submitted info, especially in front end (min + max lengths, disallowed characters for injection attacks)
- simplify/break-up route-guard logic
- tooltip to explain how and where to/not-to copy image address'
- test and make sure users can rate a recipe with score of 0 and ui/app properly handles it
- eventually implement advanced search with ranges for specific macros and possibly filter on ingredients as well & etc
- implement seeds from hard coded data instead of having api calls to trigger manually
- modularize some of the logic in edit/approve recipe components to external service


              - Security-Related -
- implement roles instead of isAdmin boolean flag
- create validation schemas for users for logins and sign ups
- possibly use built-in escape function for passwords as well
- eventually move away from storing token into local storage
- add a re-authentication process on edit users confirmation for admin request
- add a match-to regex in model level authentication for mongoose for passwords (just doing it for the experience, unneeded in application)
- front-end error handling eventually for unauthorized/expired sessions
- implement validation to make sure recipe titles are unique
- implement validation in reactive angular forms for mongoDB inj characters:   $, }, {


- rejecting recipes can lead to a notifications page where an admin can give a user a reason why they rejected or a notification that their recipe was approved
- commenting functionality on recipes?
- save as (.pdf, .txt, etc.) functionality for recipes
- possibly email or text (not gonna be free) just ingredients or something
- possibly split route-guard into two guards to simplify logic (maybe)

- look for angular equivalent to express-validator (aside from reactive forms validation)

- start using apollo client in angular app to improve optimization
- look into using apollo-server-express (or some form of apollo in express)
^^^>>> wait to implement both of these at once

- implement redis for caching functionality or other functionality such as load more recipe on scroll (also implement pagination in form of infinite scrolling for recipe list page)
^^^>>> look into RedisCache with apollo-server-cache-redis
  ^^>> possibly apollo-datasource-rest package as well

-- Due to recent findings, the possibility of separating express+node api & graphql servers so that datasource-rest and apollo-server-cache-redis make sense to use and can leverage the optimization features they provide such as batching and advanced caching --
^^>> this would make the most sense and be the most optimal for enterprise production environment

- implement docker with project so that technologies such as mongodb, node & redis can be run on all distros without any issues

- implement unit (& eventually integration) tests for node & angular
