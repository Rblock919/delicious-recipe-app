{"version":3,"sources":["./src/app/admin/approve-recipe-detail/approve-recipe-detail.component.html","./src/app/admin/approve-recipe-list/approve-recipe-list.component.html","./src/app/admin/edit-recipe-list/edit-recipe-list.component.html","./src/app/admin/edit-user-list/edit-user-list.component.html","./src/app/admin/admin-routing.module.ts","./src/app/admin/admin.module.ts","./src/app/admin/approve-recipe-detail/approve-recipe-detail.component.scss","./src/app/admin/approve-recipe-detail/approve-recipe-detail.component.ts","./src/app/admin/approve-recipe-list/approve-recipe-list.component.scss","./src/app/admin/approve-recipe-list/approve-recipe-list.component.ts","./src/app/admin/edit-recipe-list/edit-recipe-list.component.scss","./src/app/admin/edit-recipe-list/edit-recipe-list.component.ts","./src/app/admin/edit-user-list/edit-user-list.component.scss","./src/app/admin/edit-user-list/edit-user-list.component.ts","./src/app/admin/services/admin.service.ts","./src/app/admin/services/unapproved-recipe-resolver.service.ts","./src/app/admin/services/user-resolver.service.ts"],"names":[],"mappings":"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","file":"src-app-admin-admin-module.js","sourcesContent":["export default \"<main role=\\\"main\\\">\\n\\n    <!-- <div class=\\\"container\\\" style=\\\"padding-bottom: 30px\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <div class=\\\"well well-lg\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-sm-12 text-center\\\">\\n               <h1>- {{pageTitle}} -</h1>\\n               <h1 *ngIf=\\\"recipe\\\">{{recipe.title}}</h1>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <hr>\\n    </div> -->\\n\\n    <div *ngIf=\\\"recipe\\\" class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n\\n          <div class=\\\"card\\\">\\n\\n            <div class=\\\"card-header text-center\\\">\\n              <h3 *ngIf=\\\"recipe.title\\\">Edit Recipe <br> <span style=\\\"font-style: italic\\\">{{recipe.title}}</span></h3>\\n              <h3 *ngIf=\\\"!recipe.title\\\">Create New Recipe</h3>\\n            </div>\\n\\n            <div class=\\\"card-body\\\">\\n\\n              <form novalidate  (ngSubmit)=\\\"saveForm()\\\" [formGroup]=\\\"recipeForm\\\">\\n                <fieldset [disabled]=\\\"!editMode\\\">\\n\\n                <div class=\\\"form-group\\\">\\n\\n                  <div class=\\\"row form-row\\\">\\n\\n                    <div class=\\\"col-md-2\\\"></div>\\n\\n                    <div style=\\\"justify-content: center\\\" class=\\\"col-md-3 text-center input-group\\\">\\n                      <div class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">Producer:</span>\\n                      </div>\\n                        <select class=\\\"form-control\\\" formControlName=\\\"producer\\\" id=\\\"producerId\\\"\\n                                [ngClass]=\\\"{'is-invalid': (recipeForm.get('producer').touched || recipeForm.get('producer').dirty)\\n                                                          && !recipeForm.get('producer').valid }\\\" >\\n                          <option value=\\\"\\\" selected disabled hidden>Select Producer...</option>\\n                          <option value=\\\"Hello Fresh\\\">Hello Fresh</option>\\n                          <option value=\\\"Home Chef\\\">Home Chef</option>\\n                          <option value=\\\"Blue Apron\\\">Blue Apron</option>\\n                        </select>\\n                      <div *ngIf=\\\"recipeForm.get('producer').errors && recipeForm.get('producer').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                        <span>\\n                          Please select a producer.\\n                        </span>\\n                      </div>\\n                      <div *ngIf=\\\"recipeForm.get('producer').value === 'Blue Apron'\\\" class=\\\"form-check\\\">\\n                        <input (change)=\\\"changeBlueApronNutritionalFlag()\\\" [checked]=\\\"blueApronNutritionFlag\\\" class=\\\"form-check-input\\\" type=\\\"checkbox\\\" id=\\\"defaultCheck1\\\">\\n                        <label class=\\\"form-check-label\\\" for=\\\"defaultCheck1\\\">\\n                          Provides Nutritional Info\\n                        </label>\\n                      </div>\\n                    </div>\\n\\n                    <div class=\\\"col-md-1\\\"></div>\\n\\n\\n                    <div class=\\\"col-md-6 input-group\\\">\\n\\n                      <div class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">Title:</span>\\n                      </div>\\n                        <input type=\\\"text\\\" id=\\\"titleId\\\" class=\\\"form-control\\\" formControlName=\\\"title\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('title').touched || recipeForm.get('title').dirty) &&\\n                                                          !recipeForm.get('title').valid}\\\" >\\n                      <div *ngIf=\\\"recipeForm.get('title').errors && recipeForm.get('title').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                        <span>\\n                          Please enter a title.\\n                        </span>\\n                      </div>\\n                    </div>\\n\\n                    <!-- <div class=\\\"col-md-2\\\"></div> -->\\n\\n                  </div>\\n\\n                </div>\\n\\n                <hr>\\n\\n                <div class=\\\"form-group\\\">\\n                  <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-12 text-center\\\">\\n                      <h3>Ingredients</h3>\\n                    </div>\\n                    <br>\\n                    <div formArrayName=\\\"ingredients\\\" *ngFor=\\\"let ingredient of ingredients.controls; let i = index\\\" class=\\\"col-md-12\\\">\\n                        <div [formGroupName]=\\\"i\\\" class=\\\"row\\\">\\n                          <div class=\\\"col-md-2\\\"></div>\\n                          <div class=\\\"col-md-4 text-right input-group\\\">\\n                            <div class=\\\"input-group-prepend\\\">\\n                              <span class=\\\"input-group-text\\\">Ingredient {{i+1}}: </span>\\n                            </div>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" id=\\\"{{'ingredient' + i}}\\\" placeholder=\\\"Name of Ingredient\\\"\\n                                    [ngClass]=\\\"{'is-invalid': (ingredients.at(i).get('name').dirty || ingredients.at(i).get('name').touched)\\n                                                              && !ingredients.at(i).get('name').valid}\\\">\\n                            <div *ngIf=\\\"!ingredients.at(i).get('name').valid && ingredients.at(i).get('name').touched\\\" class=\\\"invalid-feedback text-center\\\">\\n                              <span>\\n                                Please enter an ingredient name.\\n                              </span>\\n                            </div>\\n                          </div>\\n                          <!-- <div class=\\\"col-md-1\\\"></div> -->\\n                          <div class=\\\"col-md-4 text-center input-group\\\">\\n                            <div class=\\\"input-group-prepend\\\">\\n                              <span class=\\\"input-group-text\\\">Amount: </span>\\n                            </div>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"amount\\\" id=\\\"{{'amount' + i}}\\\" placeholder=\\\"Amount of Ingredient\\\"\\n                                   [ngClass]=\\\"{'is-invalid': (ingredients.at(i).get('amount').dirty || ingredients.at(i).get('amount').touched)\\n                                                              && !ingredients.at(i).get('amount').valid}\\\">\\n                            <button type=\\\"button\\\" class=\\\"btn btn-outline-danger btn-sm\\\" (click)=\\\"removeIngredient(i)\\\">X</button>\\n                            <div *ngIf=\\\"!ingredients.at(i).get('amount').valid && ingredients.at(i).get('amount').touched\\\" class=\\\"invalid-feedback text-center\\\">\\n                              <span>\\n                                Please enter the ingredient amount.\\n                              </span>\\n                            </div>\\n                          </div>\\n                          <div class=\\\"col-md-2\\\"></div>\\n                        </div>\\n                    </div>\\n                  </div>\\n                </div>\\n\\n                <div class=\\\"col-md-12 text-center\\\">\\n                  <button type=\\\"button\\\" class=\\\"btn btn-outline-success\\\"\\n                          (click)=\\\"addIngredient()\\\" [disabled]=\\\"!ingredients.valid\\\">Add Ingredient</button>\\n                </div>\\n\\n                <hr>\\n\\n                <div *ngIf=\\\"recipeProducer === 'Hello Fresh' || recipeProducer === 'Home Chef'\\\" class=\\\"form-group\\\">\\n                  <div class=\\\"row\\\">\\n\\n                    <div class=\\\"col-md-12 text-center\\\">\\n                      <h3>{{preCookTitle}}</h3>\\n                    </div>\\n\\n                    <div formArrayName=\\\"preCook\\\" *ngFor=\\\"let item of preCook.controls; let i = index\\\" class=\\\"col-md-12\\\">\\n                      <div [formGroupName]=\\\"i\\\" class=\\\"row form-row\\\">\\n\\n                        <div class=\\\"col-md-3\\\"></div>\\n                        <div class=\\\"col-md-6\\\">\\n                          <div class=\\\"input-group\\\">\\n                            <div class=\\\"input-group-prepend\\\">\\n                              <span class=\\\"input-group-text\\\">\\n                                <span *ngIf=\\\"recipeProducer === 'Hello Fresh'\\\">Bust Out #{{i + 1}}:</span>\\n                                <span *ngIf=\\\"recipeProducer === 'Home Chef'\\\">Step {{i + 1}}:</span>\\n                              </span>\\n                            </div>\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"body\\\" id=\\\"{{'preCook' + i}}\\\"\\n                                   [ngClass]=\\\"{'is-invalid': (preCook.at(i).get('body').dirty || preCook.at(i).get('body').touched)\\n                                                              && !preCook.at(i).get('body').valid}\\\" >\\n                            <button type=\\\"button\\\" class=\\\"btn btn-outline-danger btn-sm\\\" (click)=\\\"removePreCook(i)\\\">X</button>\\n                            <div *ngIf=\\\"!preCook.at(i).get('body').valid && preCook.at(i).get('body').touched\\\" class=\\\"invalid-feedback text-center\\\">\\n                              <span>\\n                                Please enter the pre cooking instruction\\n                              </span>\\n                            </div>\\n                          </div>\\n                        </div>\\n                        <div class=\\\"col-md-3\\\"></div>\\n\\n                      </div>\\n                    </div>\\n\\n                  </div>\\n                </div>\\n\\n                <div *ngIf=\\\"recipeProducer === 'Hello Fresh' || recipeProducer === 'Home Chef'\\\" class=\\\"col-md-12 text-center\\\">\\n                  <button type=\\\"button\\\" [disabled]=\\\"!preCook.valid\\\" class=\\\"btn btn-outline-success\\\" (click)=\\\"addPreCook()\\\">\\n                    Add Precook <span *ngIf=\\\"recipeProducer === 'Hello Fresh'\\\">Bust Out</span> <span *ngIf=\\\"recipeProducer === 'Home Chef'\\\">Instruction</span>\\n                  </button>\\n                </div>\\n\\n                <hr *ngIf=\\\"recipeProducer === 'Hello Fresh' || recipeProducer === 'Home Chef'\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                  <div class=\\\"row\\\">\\n\\n                    <div class=\\\"col-md-12 text-center\\\">\\n                      <h3>Cooking Steps</h3>\\n                    </div>\\n\\n                    <div formArrayName=\\\"steps\\\" *ngFor=\\\"let step of steps.controls; let i = index\\\" class=\\\"col-md-12\\\">\\n                      <div [formGroupName]=\\\"i\\\" class=\\\"row form-row\\\">\\n\\n                        <div class=\\\"col-md-3\\\"></div>\\n                        <div class=\\\"col-md-6\\\">\\n                          <div class=\\\"input-group\\\">\\n                            <div class=\\\"input-group-prepend\\\">\\n                              <span class=\\\"input-group-text\\\">Step {{i+1}} Name:</span>\\n                            </div>\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"name\\\" id=\\\"{{'stepname' + i}}\\\"\\n                                   [ngClass]=\\\"{'is-invalid': (steps.at(i).get('name').dirty || steps.at(i).get('name').touched)\\n                                                              && !steps.at(i).get('name').valid}\\\" >\\n                            <div *ngIf=\\\"!steps.at(i).get('name').valid && steps.at(i).get('name').touched\\\" class=\\\"invalid-feedback text-center\\\">\\n                              <span>\\n                                Please enter a step name.\\n                              </span>\\n                            </div>\\n                          </div>\\n                          <!-- <label for=\\\"{{'stepname' + i}}\\\">Step {{i+1}} Name:</label> -->\\n                        </div>\\n                        <div class=\\\"col-md-3\\\">\\n                          <button type=\\\"button\\\" class=\\\"btn btn-outline-danger btn-sm\\\" (click)=\\\"removeStep(i)\\\">Remove Step {{i+1}}</button>\\n                        </div>\\n\\n                        <div class=\\\"col-md-12\\\">\\n                          <!-- <label for=\\\"{{'stepbody' + i}}\\\">Step {{i+1}} instructions:</label><br> -->\\n                          <div class=\\\"input-group\\\">\\n                            <div class=\\\"input-group-prepend\\\">\\n                              <span class=\\\"input-group-text\\\">Instructions:</span>\\n                            </div>\\n                            <textarea rows=\\\"2\\\" class=\\\"form-control\\\"\\n                                    formControlName=\\\"body\\\" id=\\\"{{'stepbody' + i}}\\\" placeholder=\\\"enter step {{i+1}} instructions here...\\\"\\n                                    [ngClass]=\\\"{'is-invalid': (steps.at(i).get('body').dirty || steps.at(i).get('body').touched)\\n                                                              && !steps.at(i).get('body').valid}\\\" ></textarea>\\n                            <div *ngIf=\\\"!steps.at(i).get('body').valid && steps.at(i).get('body').touched\\\" class=\\\"invalid-feedback text-center\\\">\\n                              <span>\\n                                Please enter a step description.\\n                              </span>\\n                            </div>\\n                          </div>\\n                        </div>\\n\\n                      </div>\\n                      <br>\\n                    </div>\\n\\n                  </div>\\n                </div>\\n\\n                <div class=\\\"col-md-12 text-center\\\">\\n                  <button type=\\\"button\\\" [disabled]=\\\"!steps.valid\\\" class=\\\"btn btn-outline-success\\\" (click)=\\\"addStep()\\\">Add Step</button>\\n                </div>\\n\\n                <hr>\\n\\n                <div class=\\\"col-md-12 text-center\\\">\\n                   <h3>Nurtitional Information</h3>\\n                </div>\\n\\n                <div formGroupName=\\\"nutrition\\\">\\n                <!-- <div class=\\\"row\\\"> -->\\n\\n                  <div class=\\\"form-group\\\">\\n                    <div class=\\\"form-row\\\">\\n\\n                      <div *ngIf=\\\"recipeProducer !== 'Home Chef' && recipeProducer !== 'Hello Fresh' && (!recipeProducer || (recipeProducer === 'Blue Apron' && !blueApronNutritionFlag))\\\"\\n                          class=\\\"col-md-4\\\"></div>\\n                      <div [ngClass]=\\\"{'col-md-3': (recipeProducer === 'Home Chef' || recipeProducer === 'Hello Fresh' ||\\n                                      (recipeProducer === 'Blue Apron' && blueApronNutritionFlag)),\\n                                       'col-md-4': (!recipeProducer || (recipeProducer === 'Blue Apron' && blueApronNutritionFlag === false))}\\\"\\n                            class=\\\"input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Calories:</span>\\n                        </div>\\n                        <input formControlName=\\\"calories\\\" type=\\\"text\\\" id=\\\"caloriesId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('nutrition.calories').dirty || recipeForm.get('nutrition.calories').touched)\\n                                                          && !recipeForm.get('nutrition.calories').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.calories').errors &&\\n                                    recipeForm.get('nutrition.calories').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a calorie amount.\\n                          </span>\\n                        </div>\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.calories').errors &&\\n                                    recipeForm.get('nutrition.calories').errors['numberType']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a number.\\n                          </span>\\n                        </div>\\n                      </div>\\n                      <div *ngIf=\\\"recipeProducer !== 'Home Chef' && recipeProducer !== 'Hello Fresh' && (recipeProducer === 'Blue Apron' && !blueApronNutritionFlag)\\\"\\n                            class=\\\"col-md-4\\\"></div>\\n\\n                      <div *ngIf=\\\"recipeProducer === 'Home Chef' || recipeProducer === 'Hello Fresh' || (recipeProducer === 'Blue Apron' && blueApronNutritionFlag)\\\"\\n                          class=\\\"col-md-3 input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Fat:</span>\\n                        </div>\\n                        <input formControlName=\\\"fat\\\" type=\\\"text\\\" id=\\\"fatId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('nutrition.fat').dirty || recipeForm.get('nutrition.fat').touched)\\n                                                          && !recipeForm.get('nutrition.fat').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.fat').errors &&\\n                                    recipeForm.get('nutrition.fat').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a fats amount.\\n                          </span>\\n                        </div>\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.fat').errors &&\\n                                    recipeForm.get('nutrition.fat').errors['numberType']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a number.\\n                          </span>\\n                        </div>\\n                      </div>\\n                      <div *ngIf=\\\"recipeProducer === 'Home Chef' || recipeProducer === 'Hello Fresh' || (recipeProducer === 'Blue Apron' && blueApronNutritionFlag)\\\"\\n                          class=\\\"col-md-3 input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Carbs:</span>\\n                        </div>\\n                        <input formControlName=\\\"carbohydrate\\\" type=\\\"text\\\" id=\\\"carbsId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('nutrition.carbohydrate').dirty || recipeForm.get('nutrition.carbohydrate').touched)\\n                                                          && !recipeForm.get('nutrition.carbohydrate').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.carbohydrate').errors &&\\n                                    recipeForm.get('nutrition.carbohydrate').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a carbs amount.\\n                          </span>\\n                        </div>\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.carbohydrate').errors &&\\n                                    recipeForm.get('nutrition.carbohydrate').errors['numberType']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a number.\\n                          </span>\\n                        </div>\\n                      </div>\\n                      <div *ngIf=\\\"recipeProducer === 'Home Chef' || recipeProducer === 'Hello Fresh' || (recipeProducer === 'Blue Apron' && blueApronNutritionFlag)\\\"\\n                          class=\\\"col-md-3 input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Protein:</span>\\n                        </div>\\n                        <input formControlName=\\\"protein\\\" type=\\\"text\\\" id=\\\"proteinId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('nutrition.protein').dirty || recipeForm.get('nutrition.protein').touched)\\n                                                          && !recipeForm.get('nutrition.protein').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.protein').errors &&\\n                                    recipeForm.get('nutrition.protein').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a protein amount.\\n                          </span>\\n                        </div>\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.protein').errors &&\\n                                    recipeForm.get('nutrition.protein').errors['numberType']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a number.\\n                          </span>\\n                        </div>\\n                      </div>\\n\\n                    </div>\\n                  </div>\\n\\n                  <div *ngIf=\\\"recipeProducer === 'Hello Fresh' || (recipeProducer === 'Blue Apron' && blueApronNutritionFlag)\\\" class=\\\"form-group\\\">\\n                    <div class=\\\"form-row\\\">\\n\\n                      <div class=\\\"col-md-3 input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Sugar:</span>\\n                        </div>\\n                        <input formControlName=\\\"sugar\\\" type=\\\"text\\\" id=\\\"sugarId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('nutrition.sugar').dirty || recipeForm.get('nutrition.sugar').touched)\\n                                                          && !recipeForm.get('nutrition.sugar').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.sugar').errors &&\\n                                    recipeForm.get('nutrition.sugar').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a sugar amount.\\n                          </span>\\n                        </div>\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.sugar').errors &&\\n                                    recipeForm.get('nutrition.sugar').errors['numberType']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a number.\\n                          </span>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"col-md-3 input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Saturated Fat:</span>\\n                        </div>\\n                        <input formControlName=\\\"saturatedFat\\\" type=\\\"text\\\" id=\\\"satfatId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('nutrition.saturatedFat').dirty || recipeForm.get('nutrition.saturatedFat').touched)\\n                                                          && !recipeForm.get('nutrition.saturatedFat').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.saturatedFat').errors &&\\n                                    recipeForm.get('nutrition.saturatedFat').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a saturated fats amount.\\n                          </span>\\n                        </div>\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.saturatedFat').errors &&\\n                                    recipeForm.get('nutrition.saturatedFat').errors['numberType']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a number.\\n                          </span>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"col-md-3 input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Cholesterol:</span>\\n                        </div>\\n                        <input formControlName=\\\"cholesterol\\\" type=\\\"text\\\" id=\\\"cholId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('nutrition.cholesterol').dirty || recipeForm.get('nutrition.cholesterol').touched)\\n                                                          && !recipeForm.get('nutrition.cholesterol').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.cholesterol').errors &&\\n                                    recipeForm.get('nutrition.cholesterol').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a cholesterol amount.\\n                          </span>\\n                        </div>\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.cholesterol').errors &&\\n                                    recipeForm.get('nutrition.cholesterol').errors['numberType']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a number.\\n                          </span>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"col-md-3 input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Fiber:</span>\\n                        </div>\\n                        <input formControlName=\\\"fiber\\\" type=\\\"text\\\" id=\\\"fiberId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('nutrition.fiber').dirty || recipeForm.get('nutrition.fiber').touched)\\n                                                          && !recipeForm.get('nutrition.fiber').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.fiber').errors &&\\n                                    recipeForm.get('nutrition.fiber').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a fiber amount.\\n                          </span>\\n                        </div>\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.fiber').errors &&\\n                                    recipeForm.get('nutrition.fiber').errors['numberType']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a number.\\n                          </span>\\n                        </div>\\n                      </div>\\n\\n                    </div>\\n                  </div>\\n\\n                  <div *ngIf=\\\"recipeProducer === 'Home Chef' || recipeProducer === 'Hello Fresh' || (recipeProducer === 'Blue Apron' && blueApronNutritionFlag)\\\"\\n                        class=\\\"form-group\\\">\\n                    <div class=\\\"row form-row\\\">\\n\\n                      <div class=\\\"col-md-4\\\"></div>\\n                      <div class=\\\"col-md-3 input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Sodium:</span>\\n                        </div>\\n                        <input formControlName=\\\"sodium\\\" type=\\\"text\\\" id=\\\"sodiumId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('nutrition.sodium').dirty || recipeForm.get('nutrition.sodium').touched)\\n                                                          && !recipeForm.get('nutrition.sodium').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.sodium').errors &&\\n                                    recipeForm.get('nutrition.sodium').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a sodium amount.\\n                          </span>\\n                        </div>\\n                        <div *ngIf=\\\"recipeForm.get('nutrition.sodium').errors &&\\n                                    recipeForm.get('nutrition.sodium').errors['numberType']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter a number.\\n                          </span>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"col-md-5\\\"></div>\\n\\n                    </div>\\n                  </div>\\n\\n              </div> <!-- end of nutrition form group div -->\\n\\n                  <hr>\\n                  <div class=\\\"form-group\\\">\\n                    <div class=\\\"row form-row\\\">\\n\\n                      <div class=\\\"col-md-12 text-center\\\">\\n                        <h3>Image URL</h3>\\n                      </div>\\n\\n                      <div class=\\\"col-md-12 input-group\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">Image URL:</span>\\n                        </div>\\n                        <input style=\\\"text-align: left !important\\\" formControlName=\\\"imgDir\\\" type=\\\"text\\\" id=\\\"imgId\\\" class=\\\"form-control\\\"\\n                               [ngClass]=\\\"{'is-invalid': (recipeForm.get('imgDir').dirty || recipeForm.get('imgDir').touched)\\n                                                          && !recipeForm.get('imgDir').valid}\\\" >\\n                        <div *ngIf=\\\"recipeForm.get('imgDir').errors &&\\n                                    recipeForm.get('imgDir').errors['required']\\\" class=\\\"invalid-feedback text-center\\\">\\n                          <span>\\n                            Please enter an image URL.\\n                          </span>\\n                        </div>\\n                      </div>\\n                      <br>\\n                      <div class=\\\"col-md-12\\\">\\n                        <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-4\\\"></div>\\n                        <div class=\\\"col-md-4 text-center\\\">\\n                          <label *ngIf=\\\"imageDir\\\" style=\\\"font-style: italic\\\" for=\\\"imageId\\\">Image Preview</label>\\n                          <img *ngIf=\\\"imageDir\\\" style=\\\"width: 100%\\\" id=\\\"imageId\\\" src=\\\"{{imageDir}}\\\">\\n                        </div>\\n                        <div class=\\\"col-md-4\\\"></div>\\n                        </div>\\n                      </div>\\n\\n                    </div>\\n                  </div>\\n\\n                <!-- </div> -->\\n\\n                <!-- <div class=\\\"form-group\\\">\\n                  <br>\\n                  <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n                </div> -->\\n                </fieldset>\\n              </form>\\n\\n            </div><!-- end of card body -->\\n            <div class=\\\"card-footer\\\">\\n              <div class=\\\"pull-left\\\">\\n                <button type=\\\"button\\\" [disabled]=\\\"editMode\\\" (click)=\\\"toggleEditMode()\\\" class=\\\"btn btn-info\\\">Edit</button>\\n              </div>\\n              <div class=\\\"pull-right\\\">\\n              Form Valid: {{recipeForm.valid}}\\n                <button type=\\\"button\\\" data-toggle=\\\"modal\\\" data-target=\\\"#C580\\\"\\n                        class=\\\"btn btn-danger\\\">Reject</button>\\n                <button style=\\\"margin-left: 5px\\\"  data-toggle=\\\"modal\\\" data-target=\\\"#D580\\\"\\n                        type=\\\"button\\\" class=\\\"btn btn-success\\\" >Approve</button>\\n              </div>\\n            </div><!-- end of card footer -->\\n\\n          </div> <!-- end of card -->\\n\\n        </div> <!-- end of first col-md-12 -->\\n      </div> <!-- end of first row -->\\n\\n      <!-- Reject Modal -->\\n      <div class=\\\"modal fade\\\" id=\\\"C580\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n        <div class=\\\"modal-dialog modal-dialog-centered\\\" role=\\\"document\\\">\\n          <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header text-center\\\">\\n              <h5 class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\">\\n                <span style=\\\"font-style: italic; padding-left: 10px\\\">\\n                  Reject {{recipe.title}}?\\n                </span>\\n              </h5>\\n            </div>\\n\\n            <div style=\\\"justify-content: center\\\" class=\\\"modal-footer\\\">\\n              <!-- <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Close</button> -->\\n              <button type=\\\"button\\\" (click)=\\\"rejectRecipe()\\\" data-dismiss=\\\"modal\\\" class=\\\"btn btn-danger\\\">\\n                <span>Reject</span>\\n              </button>\\n              <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                <span>Cancel</span>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <!-- Approve Modal -->\\n      <div class=\\\"modal fade\\\" id=\\\"D580\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"exampleModal2Label\\\" aria-hidden=\\\"true\\\">\\n        <div class=\\\"modal-dialog modal-dialog-centered\\\" role=\\\"document\\\">\\n          <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header text-center\\\">\\n              <h5 class=\\\"modal-title\\\" id=\\\"exampleModal2Label\\\">\\n                <span style=\\\"font-style: italic; padding-left: 10px\\\">\\n                  Approve {{recipe.title}}?\\n                </span>\\n              </h5>\\n            </div>\\n\\n            <div style=\\\"justify-content: center\\\" class=\\\"modal-footer\\\">\\n              <!-- <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Close</button> -->\\n              <button type=\\\"button\\\" (click)=\\\"saveForm()\\\" data-dismiss=\\\"modal\\\" class=\\\"btn btn-success\\\">\\n                <span>Approve</span>\\n              </button>\\n              <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                <span>Cancel</span>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n    </div> <!-- end of container -->\\n\\n</main>\\n\"","export default \"<main role=\\\"main\\\">\\n\\n  <div class=\\\"container\\\" style=\\\"padding-bottom: 30px\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <div class=\\\"well well-lg\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-sm-12 text-center\\\">\\n               <h1>Select a Recipe to Review & Approve/Reject</h1>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <hr>\\n\\n    <div *ngFor=\\\"let recipe of recipeList\\\" class=\\\"row text-center\\\">\\n      <div class=\\\"col-md-3\\\"></div>\\n      <div class=\\\"col-md-6\\\">\\n        <div>\\n          {{recipe.title}}\\n        </div>\\n        <button [routerLink]=\\\"['/admin/approve', recipe._id]\\\" class=\\\"btn btn-outline-primary\\\">View Recipe</button>\\n        <br><hr>\\n      </div>\\n      <div class=\\\"col-md-3\\\"></div>\\n      <br>\\n    </div>\\n\\n  </div>\\n\\n</main>\\n\\n\"","export default \"<main role=\\\"main\\\">\\n\\n  <div class=\\\"container\\\" style=\\\"padding-bottom: 30px\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <div class=\\\"well well-lg\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-sm-12 text-center\\\">\\n               <h1>Select Recipe to Edit</h1>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <hr>\\n\\n    <div class=\\\"row\\\">\\n      <div *ngFor=\\\"let recipe of recipeList\\\" class=\\\"col-md-4 text-center card bg-light\\\">\\n        <div class=\\\"card-body\\\">\\n          <span>{{recipe.title}}</span><br>\\n          <span><button class=\\\"btn btn-sm btn-outline-success\\\" type=\\\"button\\\" [routerLink]=\\\"['/recipe', recipe._id, 'edit']\\\">Edit This Recipe</button></span><br>\\n          <button class=\\\"btn btn-sm btn-outline-danger\\\" (click)=\\\"triggerModal(recipe)\\\" type=\\\"button\\\" [id]=\\\"recipe._id\\\" data-toggle=\\\"modal\\\" data-target=\\\"#C580\\\">\\n            Delete\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"modal fade\\\" id=\\\"C580\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n        <div class=\\\"modal-dialog modal-dialog-centered\\\" role=\\\"document\\\">\\n          <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header text-center\\\">\\n              <h5 *ngIf=\\\"selectedRecipe\\\" class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\">\\n                <span style=\\\"font-style: italic; padding-left: 10px\\\">\\n                  Delete {{selectedRecipe.title}}?\\n                </span>\\n              </h5>\\n              <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                <span aria-hidden=\\\"true\\\">&times;</span>\\n              </button>\\n            </div>\\n\\n            <div style=\\\"justify-content: center\\\" class=\\\"modal-footer\\\">\\n              <!-- <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Close</button> -->\\n              <button type=\\\"button\\\" (click)=\\\"deleteRecipe(selectedRecipe._id)\\\" data-dismiss=\\\"modal\\\" class=\\\"btn btn-danger\\\">\\n                <span>Delete</span>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n\\n\\n  </div>\\n\\n</main>\\n\"","export default \"<main role=\\\"main\\\">\\n\\n  <div class=\\\"container\\\" style=\\\"padding-bottom: 30px\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <div class=\\\"well well-lg\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-sm-12 text-center\\\">\\n               <h1>Edit Users</h1>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <hr>\\n\\n    <!-- <div class=\\\"row\\\"> -->\\n      <div *ngFor=\\\"let user of userList; let i = index\\\" class=\\\"row text-center\\\">\\n        <div class=\\\"col-md-3\\\"></div>\\n        <div class=\\\"col-md-6\\\">\\n          <div class=\\\"custom-control custom-switch\\\">\\n            <span class=\\\"pull-left\\\">User: &nbsp; <span style=\\\"font-style: italic\\\">{{user.username}}</span></span>\\n            <span class=\\\"pull-right\\\">\\n              <input type=\\\"checkbox\\\" (click)=\\\"changeStatus(user)\\\" [checked]=\\\"user.isAdmin\\\" class=\\\"custom-control-input\\\" [id]=\\\"user._id\\\">\\n              <label class=\\\"custom-control-label\\\" [for]=\\\"user._id\\\">Admin</label>\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md-3\\\"></div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-3\\\"></div>\\n        <div class=\\\"col-md-6\\\">\\n          <hr>\\n          <button (click)=\\\"submit()\\\" [disabled]=\\\"!differentFromOriginal\\\" class=\\\"btn btn-primary pull-right\\\">\\n            Save Changes\\n          </button>\\n        </div>\\n        <div class=\\\"col-md-3\\\"></div>\\n      </div>\\n    <!-- </div> -->\\n\\n  </div>\\n\\n</main>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ApproveRecipeDetailComponent } from './approve-recipe-detail/approve-recipe-detail.component';\nimport { ApproveRecipeListComponent } from './approve-recipe-list/approve-recipe-list.component';\nimport { EditRecipeListComponent } from './edit-recipe-list/edit-recipe-list.component';\nimport { EditUserListComponent } from './edit-user-list/edit-user-list.component';\nimport { RecipeResolverService } from '../core/resolvers/recipe-resolver.service';\nimport { UserResolverService } from './services/user-resolver.service';\nimport { UnapprovedRecipeResolverService } from './services/unapproved-recipe-resolver.service';\n\nconst routes: Routes = [\n  {\n    path: 'editRecipeList',\n    component: EditRecipeListComponent,\n    resolve: { resolvedData: RecipeResolverService },\n    data: { multipleRecipes: true, context: 'edit' }\n  },\n  {\n    path: 'approve',\n    component: ApproveRecipeListComponent,\n    resolve: { resolvedData: UnapprovedRecipeResolverService },\n    data: { multipleRecipes: true }\n  },\n  {\n    path: 'approve/:id',\n    component: ApproveRecipeDetailComponent,\n    resolve: { resolvedData: UnapprovedRecipeResolverService },\n    data: { multipleRecipes: false }\n  },\n  {\n    path: 'editUserList',\n    component: EditUserListComponent,\n    resolve: { resolvedData: UserResolverService },\n    data: { multipleUsers: true }\n  },\n  {\n    path: '',\n    redirectTo: '/home'\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule {\n  static components = [\n    ApproveRecipeDetailComponent,\n    ApproveRecipeListComponent,\n    EditRecipeListComponent,\n    EditUserListComponent\n  ];\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AdminService } from './services/admin.service';\nimport { UserResolverService } from './services/user-resolver.service';\nimport { UnapprovedRecipeResolverService } from './services/unapproved-recipe-resolver.service';\nimport { AdminRoutingModule } from './admin-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdminRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    AdminRoutingModule.components\n  ],\n  providers: [\n    AdminService,\n    UserResolverService,\n    UnapprovedRecipeResolverService\n  ]\n})\nexport class AdminModule { }\n","export default \"input {\\n  text-align: center; }\\n\\n.input-group {\\n  align-self: flex-start; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9oZGQvUHJvZ3JhbW1pbmcvUHJvamVjdHMvcmVjaXBlLWFwcC1uZy9zcmMvYXBwL2FkbWluL2FwcHJvdmUtcmVjaXBlLWRldGFpbC9hcHByb3ZlLXJlY2lwZS1kZXRhaWwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBa0IsRUFBQTs7QUFHcEI7RUFDRSxzQkFBc0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2FwcHJvdmUtcmVjaXBlLWRldGFpbC9hcHByb3ZlLXJlY2lwZS1kZXRhaWwuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbnB1dCB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmlucHV0LWdyb3VwIHtcbiAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbn1cbiJdfQ== */\"","import { Component, OnInit, Inject, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, ValidatorFn, AbstractControl, FormArray } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { IRecipe, IRecipeResolved } from 'src/app/models/recipe.model';\nimport { TOASTR_TOKEN, Toastr } from 'src/app/core/services/toastr.service';\nimport { RecipeApiService } from 'src/app/core/services/api/recipe-api.service';\n\nfunction numberChecker(): ValidatorFn {\n\n  return (c: AbstractControl): { [key: string]: boolean} | null => {\n\n    const isNotNumber = isNaN(c.value);\n\n    if (c.dirty && isNotNumber && c.value !== '') {\n      return {numberType: true};\n    }\n\n    return null;\n  };\n}\n\n@Component({\n  selector: 'app-approve-recipe-detail',\n  templateUrl: './approve-recipe-detail.component.html',\n  styleUrls: ['./approve-recipe-detail.component.scss']\n})\nexport class ApproveRecipeDetailComponent implements OnInit, OnDestroy {\n\n  private imgUrlSub: Subscription;\n  private producerSub: Subscription;\n\n  recipeForm: FormGroup;\n  recipeProducer: string;\n  pageTitle: any;\n  preCookTitle: string;\n  recipeId: number;\n  recipe: IRecipe;\n  imageDir: string;\n  submitted = false;\n  editMode = false;\n  blueApronNutritionFlag = false;\n\n  constructor(private recipeApiService: RecipeApiService,\n              private route: ActivatedRoute,\n              private router: Router,\n              @Inject(TOASTR_TOKEN)private toastr: Toastr,\n              private fb: FormBuilder) { }\n\n  ngOnInit() {\n    this.recipeId = this.route.snapshot.params.id;\n    // console.log('Id in detail comp: ' + this.recipeId);\n\n    this.recipeForm = this.fb.group({\n      producer: ['', Validators.required],\n      title: ['', Validators.required],\n      ingredients: this.fb.array([]),\n      preCook: this.fb.array([]),\n      steps: this.fb.array([]),\n      nutrition: this.fb.group({\n        calories: ['', [Validators.required, numberChecker()]],\n        fat: ['', [Validators.required, numberChecker()]],\n        carbohydrate: ['', [Validators.required, numberChecker()]],\n        protein: ['', [Validators.required, numberChecker()]],\n        sugar: ['', [Validators.required, numberChecker()]],\n        saturatedFat: ['', [Validators.required, numberChecker()]],\n        cholesterol: ['', [Validators.required, numberChecker()]],\n        fiber: ['', [Validators.required, numberChecker()]],\n        sodium: ['', [Validators.required, numberChecker()]]\n      }),\n      imgDir: ['', Validators.required] });\n\n    this.watchImageUrl();\n\n    const resolvedData: IRecipeResolved = this.route.snapshot.data.resolvedData;\n    if (resolvedData.error) {\n      console.error(resolvedData.error);\n      this.router.navigate(['error']);\n    } else {\n        this.recipe = resolvedData.recipe;\n        this.setValidations(this.recipe.producer);\n\n        if (this.ingredients) {\n          this.ingredients.reset();\n        }\n        if (this.steps) {\n          this.steps.reset();\n        }\n\n        let ingredientCounter = 0;\n        let stepCounter = 0;\n        let preCookCounter = 0;\n\n        this.recipe.ingredients.forEach(element => {\n          const choppedElement = element.split(' | ');\n          const ingredientName = choppedElement[0];\n          const ingredientAmount = choppedElement[1];\n          // console.log('ingredients array: ' + element);\n          this.ingredients.push(this.buildIngredient());\n          this.ingredients.at(ingredientCounter).patchValue({\n            name: ingredientName,\n            amount: ingredientAmount\n          });\n          ingredientCounter++;\n        });\n\n        this.recipe.preCook.forEach(element => {\n          this.preCook.push(this.buildPreCook());\n          this.preCook.at(preCookCounter).patchValue({\n            body: element\n          });\n          preCookCounter++;\n        });\n\n        this.recipe.steps.forEach(step => {\n          // console.log('Step ' + (stepCounter + 1) + ': ' + step.name + ' - ' + step.body);\n          this.steps.push(this.buildStep());\n          this.steps.at(stepCounter).patchValue({\n            name: step.name,\n            body: step.body\n          });\n          stepCounter++;\n        });\n\n        this.imageDir = this.recipe.imgDir;\n\n        if (this.recipe.producer === 'Blue Apron' && this.recipe.nutritionValues.fat) {\n          console.log('producer is BA and nutrition info was provided...');\n          this.changeBlueApronNutritionalFlag();\n        }\n\n        this.recipeForm.patchValue({\n          producer: this.recipe.producer,\n          title: this.recipe.title,\n          nutrition: this.recipe.nutritionValues,\n          imgDir: this.recipe.imgDir\n        });\n\n        this.watchProducer();\n\n    }\n\n  }\n\n  changeBlueApronNutritionalFlag(): void {\n    this.blueApronNutritionFlag = !this.blueApronNutritionFlag;\n    const nutritionControl = this.recipeForm.get('nutrition');\n    if (!this.blueApronNutritionFlag) {\n      console.log('no BA nutritional info \\nRemoving validators...');\n      this.removeHelloFreshValidators(nutritionControl);\n      this.removeHomeChefValidators(nutritionControl);\n    } else {\n      console.log('BA nutritional info \\nAdding validators...');\n      this.addHelloFreshValidators(nutritionControl);\n      this.addHomeChefValidators(nutritionControl);\n    }\n  }\n\n  toggleEditMode(): void {\n    this.editMode = true;\n  }\n\n  watchImageUrl(): void {\n    const imageControl = this.recipeForm.get('imgDir');\n    this.imgUrlSub = imageControl.valueChanges.pipe(debounceTime(1000)).subscribe(value => {\n      this.imageDir = value;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.imgUrlSub.unsubscribe();\n    this.producerSub.unsubscribe();\n  }\n\n  watchProducer(): void {\n    const producerControl = this.recipeForm.get('producer');\n    const nutritionControl = this.recipeForm.get('nutrition');\n\n    this.producerSub = producerControl.valueChanges.subscribe(value => {\n      if (value === 'Blue Apron') {\n        this.preCookTitle = '';\n        console.log('handling validation changes based upon BA selection');\n        this.removeHomeChefValidators(nutritionControl);\n        this.removeHelloFreshValidators(nutritionControl);\n\n        /* using the following loop to clear validators so if the user has entered precook stuff then switched to blue apron\n        the form will not clear the values in case they switch back but clear the validators so the form is valid. When the form\n        is submitted if the producer is blue apron then this comp will then clear the values so they don't get submitted to database */\n        let preCookCounter = 0;\n        while (preCookCounter < this.preCook.length) {\n          this.preCook.at(preCookCounter).get('body').clearValidators();\n          this.preCook.at(preCookCounter).get('body').updateValueAndValidity();\n          preCookCounter++;\n        }\n\n      } else if (value === 'Home Chef') {\n        // in the case of submitting blue apron originally then changing to home chef... might delete after reactivating submit function\n        // but also might keep if I create a modal window to confirm recipe and they choose no and go back to blue apron?\n        if (this.preCook.length === 0) {\n          this.preCook.push(this.buildPreCook());\n        }\n        this.preCookTitle = 'Before You Cook Instructions:';\n        this.addHomeChefValidators(nutritionControl);\n        this.removeHelloFreshValidators(nutritionControl);\n        this.reAddPreCookValidators();\n        console.log('handling validation changed based upon HC selection');\n      } else if (value === 'Hello Fresh') {\n        // in the case of submitting blue apron originally then changing to hello fresh... might delete after reactivating submit function\n        // but also might keep if I create a modal window to confirm recipe and they choose no and go back to blue apron?\n        if (this.preCook.length === 0) {\n          this.preCook.push(this.buildPreCook());\n        }\n        this.preCookTitle = 'What to Bust Out Before You Cook:';\n        this.addHomeChefValidators(nutritionControl);\n        this.addHelloFreshValidators(nutritionControl);\n        this.reAddPreCookValidators();\n        console.log('handling validation changes based upon HF selection');\n      } else {\n        console.log('in else clause');\n      }\n\n      console.log('Producer changed to: ' + value);\n      this.recipeProducer = value;\n    });\n  }\n\n  reAddPreCookValidators(): void {\n    let counter = 0;\n    while (counter < this.preCook.length) {\n      this.preCook.at(counter).get('body').setValidators(Validators.required);\n      this.preCook.at(counter).get('body').updateValueAndValidity();\n      counter++;\n    }\n  }\n\n  setValidations(producer: string) {\n    this.recipeProducer = producer;\n    const nutritionControl = this.recipeForm.get('nutrition');\n\n    if (producer === 'Blue Apron') {\n      this.preCookTitle = '';\n      this.removeHomeChefValidators(nutritionControl);\n      this.removeHelloFreshValidators(nutritionControl);\n    } else {\n      if (producer === 'Hello Fresh') {\n        this.preCookTitle = 'What to Bust Out Before You Cook:';\n      } else if (producer === 'Home Chef') {\n        this.removeHelloFreshValidators(nutritionControl);\n        this.preCookTitle = 'Before You Cook Instructions:';\n      }\n    }\n  }\n\n  saveForm(): void {\n    if (!this.recipeForm.valid) {\n      console.log('trying to save invalid form');\n      this.markFormGroupTouched(this.recipeForm);\n      // console.log(this.recipeForm.controls);\n      return;\n    }\n\n    if (this.recipeProducer === 'Blue Apron') {\n      console.log('user submitting blue apron recipe. Clearing preCook array...');\n      this.clearFormArray(this.preCook);\n      if (!this.blueApronNutritionFlag) {\n        console.log('saving BA form that doesnt provide nutrition info');\n        const nutritionControl = this.recipeForm.get('nutrition');\n        nutritionControl.get('fat').patchValue('');\n        nutritionControl.get('carbohydrate').patchValue('');\n        nutritionControl.get('protein').patchValue('');\n        nutritionControl.get('sodium').patchValue('');\n        nutritionControl.get('sugar').patchValue('');\n        nutritionControl.get('saturatedFat').patchValue('');\n        nutritionControl.get('cholesterol').patchValue('');\n        nutritionControl.get('fiber').patchValue('');\n      }\n    }\n\n    if (this.recipeProducer === 'Home Chef' && this.recipeForm.get('nutrition.sugar').value !== '') {\n      const nutritionControl = this.recipeForm.get('nutrition');\n      nutritionControl.get('sugar').patchValue('');\n      nutritionControl.get('saturatedFat').patchValue('');\n      nutritionControl.get('cholesterol').patchValue('');\n      nutritionControl.get('fiber').patchValue('');\n    }\n\n    // console.log('recipe form value: ' + JSON.stringify(this.recipeForm.value));\n    // return;\n\n    let formRecipe: IRecipe;\n    formRecipe = this.recipeForm.value;\n    // formRecipe.nutritionValues = this.recipeForm.get('nutrition').value;\n\n    formRecipe.favoriters = [];\n    formRecipe.raters = {} as Map<number, number>;\n\n    this.recipeApiService.addRecipe(formRecipe, this.recipeId).subscribe(res => {\n      this.submitted = true;\n      this.toastr.success('Recipe Successfully Approved!');\n      this.router.navigate(['/recipe', res.id]);\n    }, err => {\n      this.toastr.error('Error Submitting Recipe');\n      console.log('ERROR SUBMITTING RECIPE: ' + JSON.stringify(err));\n    });\n\n  }\n\n  private markFormGroupTouched(formGroup: FormGroup) {\n    (Object as any).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  rejectRecipe(): void {\n    this.recipeApiService.rejectRecipe(this.recipeId).subscribe((res) => {\n      console.log(`res: ${res}`);\n      this.toastr.success('Recipe successfully rejected');\n      this.router.navigate(['admin/approve']);\n    }, (err) => {\n      console.error(`Error rejecting recipe: ${err}`);\n      this.toastr.error('Error rejecting recipe');\n    })\n  }\n\n  clearFormArray(formArray: FormArray): void {\n    while (formArray.length !== 0) {\n      formArray.removeAt(0);\n    }\n  }\n\n  get ingredients(): FormArray {\n    return this.recipeForm.get('ingredients') as FormArray;\n  }\n\n  get steps(): FormArray {\n    return this.recipeForm.get('steps') as FormArray;\n  }\n\n  get preCook(): FormArray {\n    return this.recipeForm.get('preCook') as FormArray;\n  }\n\n  buildPreCook(): FormGroup {\n    return this.fb.group({\n      body: ['', Validators.required]\n    });\n  }\n\n  buildIngredient(): FormGroup {\n    return this.fb.group({\n      name: ['', Validators.required],\n      amount: ['', Validators.required]\n    });\n  }\n\n  buildStep(): FormGroup {\n    return this.fb.group({\n      name: ['', Validators.required],\n      body: ['', Validators.required]\n    });\n  }\n\n  addPreCook(): void {\n    this.preCook.push(this.buildPreCook());\n  }\n\n  addIngredient(): void {\n    this.ingredients.push(this.buildIngredient());\n  }\n\n  addStep(): void {\n    this.steps.push(this.buildStep());\n  }\n\n  removePreCook(id: number): void {\n    this.preCook.removeAt(id);\n  }\n\n  removeIngredient(id: number): void {\n    this.ingredients.removeAt(id);\n  }\n\n  removeStep(id: number): void {\n    this.steps.removeAt(id);\n  }\n\n  addHomeChefValidators(formControl: AbstractControl): void {\n    formControl.get('fat').setValidators([Validators.required, numberChecker()]);\n    formControl.get('fat').updateValueAndValidity();\n    formControl.get('carbohydrate').setValidators([Validators.required, numberChecker()]);\n    formControl.get('carbohydrate').updateValueAndValidity();\n    formControl.get('protein').setValidators([Validators.required, numberChecker()]);\n    formControl.get('protein').updateValueAndValidity();\n    formControl.get('sodium').setValidators([Validators.required, numberChecker()]);\n    formControl.get('sodium').updateValueAndValidity();\n  }\n\n  addHelloFreshValidators(formControl: AbstractControl): void {\n    formControl.get('sugar').setValidators([Validators.required, numberChecker()]);\n    formControl.get('sugar').updateValueAndValidity();\n    formControl.get('saturatedFat').setValidators([Validators.required, numberChecker()]);\n    formControl.get('saturatedFat').updateValueAndValidity();\n    formControl.get('cholesterol').setValidators([Validators.required, numberChecker()]);\n    formControl.get('cholesterol').updateValueAndValidity();\n    formControl.get('fiber').setValidators([Validators.required, numberChecker()]);\n    formControl.get('fiber').updateValueAndValidity();\n  }\n\n  removeHomeChefValidators(formControl: AbstractControl): void {\n    formControl.get('fat').clearValidators();\n    // formControl.get('fat').patchValue('');\n    formControl.get('fat').updateValueAndValidity();\n    formControl.get('carbohydrate').clearValidators();\n    // formControl.get('carbohydrate').patchValue('');\n    formControl.get('carbohydrate').updateValueAndValidity();\n    formControl.get('protein').clearValidators();\n    // formControl.get('protein').patchValue('');\n    formControl.get('protein').updateValueAndValidity();\n    formControl.get('sodium').clearValidators();\n    // formControl.get('sodium').patchValue('');\n    formControl.get('sodium').updateValueAndValidity();\n  }\n\n  removeHelloFreshValidators(formControl: AbstractControl): void {\n    formControl.get('sugar').clearValidators();\n    // formControl.get('sugar').patchValue('');\n    formControl.get('sugar').updateValueAndValidity();\n    formControl.get('saturatedFat').clearValidators();\n    // formControl.get('saturatedFat').patchValue('');\n    formControl.get('saturatedFat').updateValueAndValidity();\n    formControl.get('cholesterol').clearValidators();\n    // formControl.get('cholesterol').patchValue('');\n    formControl.get('cholesterol').updateValueAndValidity();\n    formControl.get('fiber').clearValidators();\n    // formControl.get('fiber').patchValue('');\n    formControl.get('fiber').updateValueAndValidity();\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2FwcHJvdmUtcmVjaXBlLWxpc3QvYXBwcm92ZS1yZWNpcGUtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\"","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\nimport { LoggerService } from '../../core/services/logger.service';\nimport { IRecipe, IRecipesResolved } from 'src/app/models/recipe.model';\n\n@Component({\n  selector: 'app-approve-recipe-list',\n  templateUrl: './approve-recipe-list.component.html',\n  styleUrls: ['./approve-recipe-list.component.scss']\n})\nexport class ApproveRecipeListComponent implements OnInit {\n\n  recipeList: IRecipe[];\n\n  constructor(private loggerService: LoggerService,\n              private router: Router,\n              private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    const resolvedData: IRecipesResolved = this.route.snapshot.data.resolvedData;\n\n    if (resolvedData.error) {\n      this.loggerService.consoleError(resolvedData.error);\n      this.router.navigate(['error']);\n    } else {\n      this.recipeList = resolvedData.recipes;\n    }\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2VkaXQtcmVjaXBlLWxpc3QvZWRpdC1yZWNpcGUtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\"","import { ActivatedRoute } from '@angular/router';\nimport { Component, OnInit, Inject } from '@angular/core';\nimport { IRecipe, IRecipesResolved, IRecipesGQLResolved } from 'src/app/models/recipe.model';\nimport { RecipeApiService } from 'src/app/core/services/api/recipe-api.service';\nimport { TOASTR_TOKEN, Toastr } from 'src/app/core/services/toastr.service';\nimport { JQ_TOKEN } from '../../core/services/jQuery.service';\n\n@Component({\n  selector: 'app-edit-recipe-list',\n  templateUrl: './edit-recipe-list.component.html',\n  styleUrls: ['./edit-recipe-list.component.scss']\n})\nexport class EditRecipeListComponent implements OnInit {\n\n  recipeList: IRecipe[];\n  selectedRecipe: IRecipe;\n  selectedRecipeTitle = '';\n\n  constructor(private apiService: RecipeApiService,\n              private route: ActivatedRoute,\n              @Inject(TOASTR_TOKEN) private toastr: Toastr,\n              @Inject(JQ_TOKEN) private $: any\n              ) { }\n\n  ngOnInit() {\n    const resolvedData = this.route.snapshot.data.resolvedData as IRecipesGQLResolved;\n    this.recipeList = [];\n\n    if (resolvedData.error) {\n      console.error(`Error in edit recipe list component: ${resolvedData.error}`);\n    } else {\n      for (const recipe of resolvedData.recipes) {\n        let tmpRecipe: IRecipe;\n        tmpRecipe = {\n          _id: recipe._id,\n          title: recipe.title\n        };\n        this.recipeList.push(tmpRecipe);\n      }\n      // this.recipeList = resolvedData.recipes;\n    }\n\n    // this.apiService.getRecipeList().subscribe(data => {\n      // this.recipeList = data;\n    // });\n  }\n\n  triggerModal(recipe: IRecipe): void {\n    this.selectedRecipe = recipe;\n    this.selectedRecipeTitle = recipe.title;\n    console.log('Selected Recipe: ' + this.selectedRecipe.title);\n  }\n\n  deleteRecipe(recipeId: number): void {\n    this.apiService.deleteRecipe(recipeId).subscribe(res => {\n      console.log('Res: ' + res);\n      this.recipeList = this.recipeList.filter(x => x._id !== recipeId);\n      this.toastr.success('Recipe Successfully Deleted');\n    }, err => {\n      console.error(err);\n      this.toastr.error('Error Deleting Recipe');\n    });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2VkaXQtdXNlci1saXN0L2VkaXQtdXNlci1saXN0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit, Inject } from '@angular/core';\n\nimport { AdminService } from 'src/app/admin/services/admin.service';\nimport { IUser, IUsersResolved } from 'src/app/models/user.model';\nimport { TOASTR_TOKEN, Toastr } from '../../core/services/toastr.service';\n\n@Component({\n  selector: 'app-edit-user-list',\n  templateUrl: './edit-user-list.component.html',\n  styleUrls: ['./edit-user-list.component.scss']\n})\nexport class EditUserListComponent implements OnInit {\n\n  userList: IUser[];\n  updatedUserList: IUser[];\n  editedAdminFields: boolean[];\n  differentFromOriginal = false;\n\n  constructor(private adminService: AdminService,\n              private route: ActivatedRoute,\n              private router: Router,\n              @Inject(TOASTR_TOKEN) private toastr: Toastr\n              ) { }\n\n  ngOnInit() {\n    this.editedAdminFields = [];\n    this.userList = [];\n    const resolvedData = this.route.snapshot.data.resolvedData as IUsersResolved;\n\n    if (resolvedData.error) {\n      console.error(`Error: ${resolvedData.error}`);\n      this.router.navigate(['error']);\n    } else {\n      this.userList = resolvedData.users;\n      let counter = 0;\n      this.userList.forEach(user => {\n        this.editedAdminFields.push();\n        this.editedAdminFields[counter] = user.isAdmin;\n        counter++;\n      });\n    }\n\n  }\n\n  changeStatus(user: IUser): void {\n    const index = this.userList.indexOf(user);\n    this.editedAdminFields[index] = !this.editedAdminFields[index];\n    this.calcDiff();\n  }\n\n  calcDiff(): void {\n    this.differentFromOriginal = false;\n    let counter = 0;\n    while (counter < this.userList.length) {\n      if (this.editedAdminFields[counter] !== this.userList[counter].isAdmin) {\n        this.differentFromOriginal = true;\n      }\n      counter++;\n    }\n  }\n\n  submit(): void {\n    this.updatedUserList = [];\n    let counter = 0;\n    let counter2 = 0;\n\n    this.userList.forEach(user => {\n      if (user.isAdmin !== this.editedAdminFields[counter]) {\n        this.updatedUserList.push(user);\n        this.updatedUserList[counter2].isAdmin = this.editedAdminFields[counter];\n        counter2++;\n      }\n      counter++;\n    });\n\n    this.adminService.updateUsers(this.updatedUserList).subscribe(res => {\n      console.log('res: ' + res);\n      this.toastr.success('Users Successfully Updated!');\n      this.differentFromOriginal = false;\n      let counter3 = 0;\n      this.editedAdminFields = [];\n      this.userList.forEach(user => {\n        this.editedAdminFields.push();\n        this.editedAdminFields[counter3] = user.isAdmin;\n        counter3++;\n      });\n    }, err => {\n      console.log('err: ' + JSON.stringify(err));\n      this.toastr.error('Error Updating Users');\n    });\n    console.log('submitted userList: ' + JSON.stringify(this.updatedUserList));\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\n\n// import { AdminModule } from '../../admin/admin.module';\nimport { IUser } from '../../models/user.model';\nimport { IRecipe } from '../../models/recipe.model';\nimport { environment } from 'src/environments/environment';\nimport { GraphqlService } from '../../core/services/api/graphql.service';\n\n@Injectable(\n   // { providedIn: AdminModule }\n  )\nexport class AdminService {\n  private uri = environment.path + 'admin';\n\n  constructor(private httpClient: HttpClient, private graphQLService: GraphqlService) { }\n\n  getUsers(): Observable<any>  {\n    return this.graphQLService.getUserList();\n    // return this.httpClient.get<IUser[]>(`${this.uri}/getUsers`, {responseType: 'json'});\n  }\n\n  updateUsers(users: IUser[]): Observable<any> {\n    return this.httpClient.post(`${this.uri}/updateUsers`, users, {responseType: 'text'});\n  }\n\n  getApprovalList(): Observable<any> {\n    // return this.httpClient.get<IRecipe[]>(`${this.uri}/approval`, {responseType: 'json'});\n    return this.graphQLService.getApprovalList();\n  }\n\n  getApprovalById(id: number): Observable<IRecipe> {\n    return this.httpClient.get<IRecipe>(`${this.uri}/approval/${id}`, {responseType: 'json'});\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      return of(result as T);\n    };\n  }\n\n}\n","import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { IRecipeResolved, IRecipesResolved } from '../../models/recipe.model';\nimport { AdminService } from 'src/app/admin/services/admin.service';\n\n@Injectable(\n  // { providedIn: 'root' }\n)\nexport class UnapprovedRecipeResolverService implements Resolve<IRecipeResolved | IRecipesResolved> {\n\n  constructor(private adminService: AdminService) { }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<IRecipeResolved> | Promise<IRecipeResolved> |\n  IRecipeResolved | Observable<IRecipesResolved>  | Promise<IRecipesResolved> | IRecipesResolved {\n\n    const multiple = route.data.multipleRecipes;\n\n    if (multiple) {\n      return this.adminService.getApprovalList()\n        .pipe(map(graphQLRes => ({recipes: graphQLRes.data.recipes})),\n        catchError(error => {\n          return of ({recipes: null, error});\n        })\n      );\n    } else {\n      const id = route.params.id;\n\n      return this.adminService.getApprovalById(id)\n        .pipe(map(recipe => ({recipe})),\n        catchError(error => {\n          return of ({recipe: null, error});\n        })\n      );\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { IUserResolved, IUsersResolved } from '../../models/user.model';\nimport { AdminService } from 'src/app/admin/services/admin.service';\n\n@Injectable(\n  // { providedIn: 'root' }\n)\nexport class UserResolverService implements Resolve<IUsersResolved> {\n\n  constructor(private adminService: AdminService) { }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<IUsersResolved> |\n    Promise<IUsersResolved> | IUsersResolved {\n    console.log('in user resolver');\n    const multiple = route.data.multipleUsers;\n\n    // if (multiple) { // implement once a need for fetching a single user is needed inside the interface and not just refreshing userdata\n    if (true) {\n      return this.adminService.getUsers()\n        .pipe(map(graphQLRes => ({users: graphQLRes.data.users})),\n          catchError(error => {\n            console.error(error);\n            return of ({users: null, error});\n          })\n        );\n      // return this.adminService.getUsers()\n      //   .pipe(map(users => ({users})),\n      //   catchError(error => {\n      //     console.error(error);\n      //     return of ({users: null, error});\n      //   })\n      // );\n    } else {\n      // to-do: fetch a single user\n    }\n\n  }\n\n}\n"],"sourceRoot":"webpack:///"}